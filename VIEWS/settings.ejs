<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings | StudyStudy</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-hover: #3a56d4;
            --danger-color: #ef233c;
            --danger-hover: #d90429;
            --text-color: #2b2d42;
            --text-light: #8d99ae;
            --bg-color: #f8f9fa;
            --card-bg: #ffffff;
            --border-color: #e9ecef;
            --success-color: #4cc9f0;
            --warning-color: #f8961e;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Navigation */
        .sidebar {
            width: 250px;
            background-color: var(--card-bg);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            padding: 2rem 1rem;
            position: fixed;
            height: 100vh;
            z-index: 100;
        }

        .logo {
            margin-bottom: 2rem;
            padding: 0 1rem;
        }

        .logo h1 {
            color: var(--primary-color);
            font-size: 1.8rem;
            font-weight: 700;
        }

        .logo span {
            color: var(--text-color);
        }

        .nav {
            margin-top: 2rem;
        }

        .nav ul {
            list-style: none;
        }

        .nav li {
            margin-bottom: 0.5rem;
        }

        .nav a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--text-light);
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .nav a:hover {
            color: var(--primary-color);
            background-color: rgba(67, 97, 238, 0.1);
        }

        .nav a.active {
            color: var(--primary-color);
            background-color: rgba(67, 97, 238, 0.1);
            font-weight: 500;
        }

        .nav i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 24px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 2rem;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-header h1 {
            font-size: 2rem;
            font-weight: 600;
            color: var(--text-color);
        }

        .user-profile {
            display: flex;
            align-items: center;
        }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 0.75rem;
            object-fit: cover;
        }

        .user-profile span {
            font-weight: 500;
        }

        /* Settings Container */
        .settings-container {
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .settings-tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
        }

        .tab-btn {
            background: none;
            border: none;
            padding: 1rem 2rem;
            font-size: 1rem;
            cursor: pointer;
            color: var(--text-light);
            position: relative;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
        }

        .tab-btn:hover {
            color: var(--primary-color);
        }

        .tab-btn.active {
            color: var(--primary-color);
            font-weight: 600;
        }

        .tab-btn.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 3px;
            background: var(--primary-color);
        }

        .tab-btn i {
            margin-right: 0.5rem;
            font-size: 1.1rem;
        }

        .tab-content {
            display: none;
            padding: 2rem;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tab-content h2 {
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            color: var(--text-color);
            display: flex;
            align-items: center;
        }

        .tab-content h2 i {
            margin-right: 0.75rem;
            color: var(--primary-color);
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
            max-width: 500px;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            transition: border 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .form-group.checkbox {
            display: flex;
            align-items: center;
        }

        .form-group.checkbox input {
            width: auto;
            margin-right: 0.75rem;
        }

        .form-row {
            display: flex;
            gap: 1.5rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
        }

        .btn i {
            margin-right: 0.5rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.2);
        }

        .btn-outline {
            background: transparent;
            color: var(--primary-color);
            border: 1px solid var(--primary-color);
        }

        .btn-outline:hover {
            background: rgba(67, 97, 238, 0.1);
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background: var(--danger-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(239, 35, 60, 0.2);
        }

        /* Danger Zone */
        .danger-zone {
            background: var(--card-bg);
            border-radius: 8px;
            padding: 2rem;
            margin-top: 2rem;
            border-left: 4px solid var(--danger-color);
        }

        .danger-zone h3 {
            margin-bottom: 1rem;
            color: var(--danger-color);
            display: flex;
            align-items: center;
        }

        .danger-zone h3 i {
            margin-right: 0.75rem;
        }

        .danger-zone p {
            color: var(--text-light);
            margin-bottom: 1.5rem;
        }

        /* Profile Picture Upload */
        .profile-picture {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
        }

        .profile-picture img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1.5rem;
            border: 3px solid var(--border-color);
        }

        .profile-picture-actions {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .file-input {
            display: none;
        }

        /* Password Strength Indicator */
        .password-strength {
            margin-top: 0.5rem;
            height: 4px;
            background-color: var(--border-color);
            border-radius: 2px;
            overflow: hidden;
        }

        .strength-bar {
            height: 100%;
            width: 0;
            transition: width 0.3s ease, background-color 0.3s ease;
        }

        .strength-weak {
            background-color: var(--danger-color);
            width: 25%;
        }

        .strength-medium {
            background-color: var(--warning-color);
            width: 50%;
        }

        .strength-strong {
            background-color: var(--success-color);
            width: 75%;
        }

        .strength-very-strong {
            background-color: #2ecc71;
            width: 100%;
        }

        .strength-text {
            font-size: 0.8rem;
            color: var(--text-light);
            margin-top: 0.25rem;
        }

        /* Footer */
        .footer {
            margin-top: 3rem;
            padding-top: 2rem;
            border-top: 1px solid var(--border-color);
            text-align: center;
            color: var(--text-light);
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .sidebar {
                width: 220px;
                padding: 1.5rem 0.5rem;
            }

            .main-content {
                margin-left: 220px;
                padding: 1.5rem;
            }
        }

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
                padding: 1rem;
            }

            .nav {
                margin-top: 1rem;
            }

            .nav ul {
                display: flex;
                overflow-x: auto;
                padding-bottom: 0.5rem;
            }

            .nav li {
                margin-bottom: 0;
                margin-right: 0.5rem;
            }

            .nav a {
                padding: 0.5rem 0.75rem;
                white-space: nowrap;
            }

            .main-content {
                margin-left: 0;
                padding: 1.5rem 1rem;
            }

            .settings-tabs {
                overflow-x: auto;
                padding-bottom: 0.5rem;
            }

            .tab-btn {
                padding: 0.75rem 1.25rem;
                white-space: nowrap;
            }

            .form-row {
                flex-direction: column;
                gap: 1rem;
            }
        }

        @media (max-width: 576px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .profile-picture {
                flex-direction: column;
                align-items: flex-start;
            }

            .profile-picture img {
                margin-right: 0;
                margin-bottom: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar Navigation -->
        <aside class="sidebar">
            <div class="logo">
                <h1>Study<span>Study</span></h1>
            </div>
            <nav class="nav">
                <ul>
                    <li><a href="/home"><i class="fas fa-home"></i> Home</a></li>
                    <li><a href="/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li><a href="/resources"><i class="fas fa-book"></i> Resources</a></li>
                    <li><a href="/model-papers"><i class="fas fa-file-alt"></i> Model Papers</a></li>
                    <li><a href="/profile"><i class="fas fa-user"></i> Profile</a></li>
                    <li><a href="/settings" class="active"><i class="fas fa-cog"></i> Settings</a></li>
                    <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="page-header">
                <h1>Account Settings</h1>
                <div class="user-profile">
                    <img src="<%= user.avatar || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.userName) + '&background=4361ee&color=fff' %>" alt="Profile">
                    <span><%= user.userName %></span>
                </div>
            </div>

            <div class="settings-container">
                <div class="settings-tabs">
                    <button class="tab-btn active" data-tab="account">
                        <i class="fas fa-user-circle"></i> Account
                    </button>
                    <button class="tab-btn" data-tab="security">
                        <i class="fas fa-shield-alt"></i> Security
                    </button>
                    <button class="tab-btn" data-tab="notifications">
                        <i class="fas fa-bell"></i> Notifications
                    </button>
                    <button class="tab-btn" data-tab="preferences">
                        <i class="fas fa-sliders-h"></i> Preferences
                    </button>
                </div>

                <!-- Account Tab -->
                <div id="account" class="tab-content active">
                    <h2><i class="fas fa-user-edit"></i> Profile Information</h2>
                    
                    <div class="profile-picture">
                        <img src="<%= user.avatar || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.userName) + '&background=4361ee&color=fff' %>" alt="Profile Picture" id="profileImage">
                        <div class="profile-picture-actions">
                            <button class="btn btn-outline" id="changePhotoBtn">
                                <i class="fas fa-camera"></i> Change Photo
                            </button>
                            <input type="file" id="profilePhoto" class="file-input" accept="image/*">
                            <button class="btn btn-outline" id="removePhotoBtn">
                                <i class="fas fa-trash"></i> Remove Photo
                            </button>
                        </div>
                    </div>
                    
                    <form id="updateProfileForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="userName">Full Name</label>
                                <input type="text" id="userName" name="userName" value="<%= user.userName %>" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="userEmail">Email Address</label>
                            <input type="email" id="userEmail" name="userEmail" value="<%= user.userEmail %>" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="bio">Bio</label>
                            <textarea id="bio" name="bio" rows="3" placeholder="Tell us about yourself..."><%= user.bio || '' %></textarea>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                    </form>
                </div>

                <!-- Security Tab -->
                <div id="security" class="tab-content">
                    <h2><i class="fas fa-lock"></i> Password & Security</h2>
                    
                    <form id="changePasswordForm">
                        <div class="form-group">
                            <label for="currentPassword">Current Password</label>
                            <input type="password" id="currentPassword" name="currentPassword" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <input type="password" id="newPassword" name="newPassword" required>
                            <div class="password-strength">
                                <div class="strength-bar" id="strengthBar"></div>
                            </div>
                            <div class="strength-text" id="strengthText">Password strength</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirmPassword">Confirm New Password</label>
                            <input type="password" id="confirmPassword" name="confirmPassword" required>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-key"></i> Change Password
                        </button>
                    </form>
                    
                    <div class="danger-zone">
                        <h3><i class="fas fa-exclamation-triangle"></i> Two-Factor Authentication</h3>
                        <p>Add an extra layer of security to your account by enabling two-factor authentication.</p>
                        <button class="btn btn-outline" id="enable2faBtn">
                            <i class="fas fa-mobile-alt"></i> Enable 2FA
                        </button>
                    </div>
                </div>

                <!-- Notifications Tab -->
                <div id="notifications" class="tab-content">
                    <h2><i class="fas fa-bell"></i> Notification Preferences</h2>
                    
                    <form id="notificationSettings">
                        <h3 style="margin: 1.5rem 0 1rem; font-size: 1.2rem;">Email Notifications</h3>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="emailNotifications" name="emailNotifications" <%= user.notifications?.email ? 'checked' : '' %>>
                            <label for="emailNotifications">Enable email notifications</label>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="resourceUpdates" name="resourceUpdates" <%= user.notifications?.resourceUpdates ? 'checked' : '' %>>
                            <label for="resourceUpdates">New resource updates</label>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="deadlineReminders" name="deadlineReminders" <%= user.notifications?.deadlineReminders ? 'checked' : '' %>>
                            <label for="deadlineReminders">Deadline reminders</label>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="promotionalEmails" name="promotionalEmails" <%= user.notifications?.promotionalEmails ? 'checked' : '' %>>
                            <label for="promotionalEmails">Promotional emails</label>
                        </div>
                        
                        <h3 style="margin: 1.5rem 0 1rem; font-size: 1.2rem;">Push Notifications</h3>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="pushNotifications" name="pushNotifications" <%= user.notifications?.push ? 'checked' : '' %>>
                            <label for="pushNotifications">Enable push notifications</label>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="importantAlerts" name="importantAlerts" <%= user.notifications?.importantAlerts ? 'checked' : '' %>>
                            <label for="importantAlerts">Important alerts</label>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Preferences
                        </button>
                    </form>
                </div>

                <!-- Preferences Tab -->
                <div id="preferences" class="tab-content">
                    <h2><i class="fas fa-paint-brush"></i> Application Preferences</h2>
                    
                    <form id="appPreferences">
                        <div class="form-group">
                            <label for="theme">Theme</label>
                            <select id="theme" name="theme">
                                <option value="light" <%= user.preferences?.theme === 'light' ? 'selected' : '' %>>Light</option>
                                <option value="dark" <%= user.preferences?.theme === 'dark' ? 'selected' : '' %>>Dark</option>
                                <option value="system" <%= !user.preferences?.theme || user.preferences?.theme === 'system' ? 'selected' : '' %>>System Default</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="language">Language</label>
                            <select id="language" name="language">
                                <option value="en" <%= !user.preferences?.language || user.preferences?.language === 'en' ? 'selected' : '' %>>English</option>
                                <option value="es" <%= user.preferences?.language === 'es' ? 'selected' : '' %>>Spanish</option>
                                <option value="fr" <%= user.preferences?.language === 'fr' ? 'selected' : '' %>>French</option>
                                <option value="de" <%= user.preferences?.language === 'de' ? 'selected' : '' %>>German</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="itemsPerPage">Items Per Page</label>
                            <select id="itemsPerPage" name="itemsPerPage">
                                <option value="10" <%= !user.preferences?.itemsPerPage || user.preferences?.itemsPerPage === 10 ? 'selected' : '' %>>10</option>
                                <option value="25" <%= user.preferences?.itemsPerPage === 25 ? 'selected' : '' %>>25</option>
                                <option value="50" <%= user.preferences?.itemsPerPage === 50 ? 'selected' : '' %>>50</option>
                                <option value="100" <%= user.preferences?.itemsPerPage === 100 ? 'selected' : '' %>>100</option>
                            </select>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="animations" name="animations" <%= !user.preferences || user.preferences?.animations ? 'checked' : '' %>>
                            <label for="animations">Enable animations</label>
                        </div>
                        
                        <div class="form-group checkbox">
                            <input type="checkbox" id="compactMode" name="compactMode" <%= user.preferences?.compactMode ? 'checked' : '' %>>
                            <label for="compactMode">Compact mode</label>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Preferences
                        </button>
                    </form>
                </div>
            </div>

            <!-- Danger Zone -->
            <div class="danger-zone">
                <h3><i class="fas fa-exclamation-triangle"></i> Danger Zone</h3>
                <p>These actions are irreversible. Please proceed with caution.</p>
                
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button class="btn btn-danger" id="deleteAccountBtn">
                        <i class="fas fa-trash"></i> Delete Account
                    </button>
                    
                    <button class="btn btn-outline" id="exportDataBtn">
                        <i class="fas fa-file-export"></i> Export Data
                    </button>
                </div>
            </div>

            <footer class="footer">
                <p>© 2025 StudyStudy. All rights reserved.</p>
            </footer>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab switching functionality
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const tabId = button.getAttribute('data-tab');
                    
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    document.getElementById(tabId).classList.add('active');
                });
            });
            
            // Profile picture upload
            const changePhotoBtn = document.getElementById('changePhotoBtn');
            const removePhotoBtn = document.getElementById('removePhotoBtn');
            const profilePhoto = document.getElementById('profilePhoto');
            const profileImage = document.getElementById('profileImage');
            
            changePhotoBtn.addEventListener('click', () => {
                profilePhoto.click();
            });
            
            profilePhoto.addEventListener('change', async (e) => {
                if (e.target.files.length > 0) {
                    const file = e.target.files[0];
                    
                    // Validate file size (max 2MB)
                    if (file.size > 2 * 1024 * 1024) {
                        alert('Please select an image smaller than 2MB');
                        return;
                    }
                    
                    // Preview the image
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        profileImage.src = event.target.result;
                    };
                    reader.readAsDataURL(file);
                    
                    // Upload to server
                    try {
                        const formData = new FormData();
                        formData.append('avatar', file);
                        
                        const response = await fetch('/upload-avatar', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Accept': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error('Upload failed');
                        }
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            // Update the avatar URL in the UI
                            profileImage.src = result.avatarUrl;
                            alert('Profile picture updated successfully!');
                        } else {
                            throw new Error(result.message || 'Upload failed');
                        }
                    } catch (error) {
                        console.error('Error uploading avatar:', error);
                        alert('Failed to upload avatar. Please try again.');
                        // Revert to previous avatar
                        profileImage.src = '<%= user.avatar || "https://ui-avatars.com/api/?name=" + encodeURIComponent(user.userName) + "&background=4361ee&color=fff" %>';
                    }
                }
            });
            
            removePhotoBtn.addEventListener('click', async () => {
                if (confirm('Are you sure you want to remove your profile picture?')) {
                    try {
                        const response = await fetch('/api/remove-avatar', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to remove avatar');
                        }
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            profileImage.src = 'https://ui-avatars.com/api/?name=<%= encodeURIComponent(user.userName) %>&background=4361ee&color=fff';
                            alert('Profile picture removed successfully!');
                        } else {
                            throw new Error(result.message || 'Failed to remove avatar');
                        }
                    } catch (error) {
                        console.error('Error removing avatar:', error);
                        alert('Failed to remove avatar. Please try again.');
                    }
                }
            });
            
            // Password strength indicator
            const newPassword = document.getElementById('newPassword');
            const strengthBar = document.getElementById('strengthBar');
            const strengthText = document.getElementById('strengthText');
            
            newPassword.addEventListener('input', () => {
                const password = newPassword.value;
                let strength = 0;
                
                // Check password length
                if (password.length >= 8) strength += 1;
                if (password.length >= 12) strength += 1;
                
                // Check for lowercase, uppercase, numbers, and special chars
                if (/[a-z]/.test(password)) strength += 1;
                if (/[A-Z]/.test(password)) strength += 1;
                if (/[0-9]/.test(password)) strength += 1;
                if (/[^a-zA-Z0-9]/.test(password)) strength += 1;
                
                // Update strength bar and text
                strengthBar.className = 'strength-bar';
                
                if (password.length === 0) {
                    strengthText.textContent = 'Password strength';
                } else if (strength <= 2) {
                    strengthBar.classList.add('strength-weak');
                    strengthText.textContent = 'Weak';
                    strengthText.style.color = 'var(--danger-color)';
                } else if (strength <= 4) {
                    strengthBar.classList.add('strength-medium');
                    strengthText.textContent = 'Medium';
                    strengthText.style.color = 'var(--warning-color)';
                } else if (strength <= 6) {
                    strengthBar.classList.add('strength-strong');
                    strengthText.textContent = 'Strong';
                    strengthText.style.color = 'var(--success-color)';
                } else {
                    strengthBar.classList.add('strength-very-strong');
                    strengthText.textContent = 'Very Strong';
                    strengthText.style.color = '#2ecc71';
                }
            });
            
            // Form submissions
            document.getElementById('updateProfileForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    userName: document.getElementById('userName').value,
                    userEmail: document.getElementById('userEmail').value,
                    bio: document.getElementById('bio').value
                };
                
                try {
                    const response = await fetch('/api/update-profile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (!response.ok) {
                        throw new Error('Update failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Profile updated successfully!');
                    } else {
                        throw new Error(result.message || 'Update failed');
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);
                    alert('Failed to update profile. Please try again.');
                }
            });
            
            document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const currentPass = document.getElementById('currentPassword').value;
                const newPass = document.getElementById('newPassword').value;
                const confirmPass = document.getElementById('confirmPassword').value;
                
                if (newPass !== confirmPass) {
                    alert('Passwords do not match!');
                    return;
                }
                
                try {
                    const response = await fetch('/api/change-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            currentPassword: currentPass,
                            newPassword: newPass
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error('Password change failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Password changed successfully!');
                        this.reset();
                        strengthBar.className = 'strength-bar';
                        strengthText.textContent = 'Password strength';
                        strengthText.style.color = 'var(--text-light)';
                    } else {
                        throw new Error(result.message || 'Password change failed');
                    }
                } catch (error) {
                    console.error('Error changing password:', error);
                    alert('Failed to change password. Please try again.');
                }
            });
            
            document.getElementById('notificationSettings').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    emailNotifications: document.getElementById('emailNotifications').checked,
                    resourceUpdates: document.getElementById('resourceUpdates').checked,
                    deadlineReminders: document.getElementById('deadlineReminders').checked,
                    promotionalEmails: document.getElementById('promotionalEmails').checked,
                    pushNotifications: document.getElementById('pushNotifications').checked,
                    importantAlerts: document.getElementById('importantAlerts').checked
                };
                
                try {
                    const response = await fetch('/api/update-notifications', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (!response.ok) {
                        throw new Error('Update failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Notification preferences saved!');
                    } else {
                        throw new Error(result.message || 'Update failed');
                    }
                } catch (error) {
                    console.error('Error updating notifications:', error);
                    alert('Failed to save preferences. Please try again.');
                }
            });
            
            document.getElementById('appPreferences').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    theme: document.getElementById('theme').value,
                    language: document.getElementById('language').value,
                    itemsPerPage: parseInt(document.getElementById('itemsPerPage').value),
                    animations: document.getElementById('animations').checked,
                    compactMode: document.getElementById('compactMode').checked
                };
                
                try {
                    const response = await fetch('/api/update-preferences', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (!response.ok) {
                        throw new Error('Update failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Application preferences saved!');
                    } else {
                        throw new Error(result.message || 'Update failed');
                    }
                } catch (error) {
                    console.error('Error updating preferences:', error);
                    alert('Failed to save preferences. Please try again.');
                }
            });
            
            // Delete account confirmation
            document.getElementById('deleteAccountBtn').addEventListener('click', async function() {
                if (confirm('Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently lost.')) {
                    try {
                        const response = await fetch('/api/delete-account', {
                            method: 'DELETE',
                            headers: {
                                'Accept': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error('Delete failed');
                        }
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            alert('Account deleted successfully. You will be logged out shortly.');
                            window.location.href = '/logout';
                        } else {
                            throw new Error(result.message || 'Delete failed');
                        }
                    } catch (error) {
                        console.error('Error deleting account:', error);
                        alert('Failed to delete account. Please try again.');
                    }
                }
            });
            
            // Export data button
            document.getElementById('exportDataBtn').addEventListener('click', async function() {
                try {
                    const response = await fetch('/api/export-data', {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Export failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Your data export has been initiated. You will receive an email with download instructions shortly.');
                    } else {
                        throw new Error(result.message || 'Export failed');
                    }
                } catch (error) {
                    console.error('Error exporting data:', error);
                    alert('Failed to initiate data export. Please try again.');
                }
            });
            
            // Enable 2FA button
            document.getElementById('enable2faBtn').addEventListener('click', async function() {
                try {
                    const response = await fetch('/api/enable-2fa', {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('2FA setup failed');
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('Two-factor authentication setup will begin. Follow the instructions on the next screen.');
                        // Redirect to 2FA setup page if needed
                        if (result.redirectUrl) {
                            window.location.href = result.redirectUrl;
                        }
                    } else {
                        throw new Error(result.message || '2FA setup failed');
                    }
                } catch (error) {
                    console.error('Error enabling 2FA:', error);
                    alert('Failed to enable two-factor authentication. Please try again.');
                }
            });
        });
    </script>
</body>
</html>