<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>StudyBuddy - Upload</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <style>
    :root {
      --primary-color: #4e73df;
      --secondary-color: #f8f9fc;
      --accent-color: #2e59d9;
      --danger-color: #e74a3b;
      --info-color: #36b9cc;
      --text-muted: #6c757d;
      --text-light: #adb5bd;
    }
    
    /* Card Styles */
    .upload-card {
      transition: all 0.3s ease;
      cursor: pointer;
      height: 100%;
      border: none;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      background: white;
    }
    
    .upload-card:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }
    
    /* File Preview Styles */
    .file-preview {
      height: 180px;
      background: var(--secondary-color);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }
    
    .pdf-icon {
      color: var(--danger-color);
      font-size: 4rem;
      opacity: 0.8;
    }
    
    .text-icon {
      color: var(--info-color);
      font-size: 4rem;
      opacity: 0.8;
    }
    
    .img-preview {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }
    
    .upload-card:hover .img-preview {
      transform: scale(1.1);
    }
    
    .text-preview {
      padding: 15px;
      max-height: 180px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
      background: white;
    }
    
    /* Card Content Styles */
    .card-body {
      padding: 1.25rem;
    }
    
    .card-title {
      font-weight: 600;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }
    
    .card-text {
      color: var(--text-muted);
      font-size: 0.9rem;
    }
    
    .upload-date {
      font-size: 0.8rem;
      color: var(--text-light);
    }
    
    /* Action Buttons */
    .action-buttons {
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
    }
    
    .btn-view {
      background: var(--primary-color);
      color: white;
      border: none;
    }
    
    .btn-view:hover {
      background: var(--accent-color);
      color: white;
    }
    
    /* Empty State Styles */
    .empty-state {
      text-align: center;
      padding: 3rem;
      background: var(--secondary-color);
      border-radius: 10px;
      margin-top: 2rem;
    }
    
    .empty-icon {
      font-size: 5rem;
      color: #dddfeb;
      margin-bottom: 1rem;
    }
    
    /* Upload Button */
    .upload-btn {
      background: var(--primary-color);
      border: none;
      padding: 0.5rem 1.5rem;
      font-weight: 600;
      transition: all 0.3s;
      color: white;
    }
    
    .upload-btn:hover {
      background: var(--accent-color);
      transform: translateY(-2px);
      color: white;
    }
    
    /* File Badge */
    .file-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 20px;
      font-size: 0.7rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    /* Filter Controls */
    .filter-controls {
      background: white;
      padding: 1rem;
      border-radius: 10px;
      margin-bottom: 2rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    /* PDF Iframe Viewer Styles */
.pdf-overlay-buttons {
  position: absolute;
  bottom: 20px;
  right: 20px;
  z-index: 100;
  opacity: 0.8;
}

.pdf-overlay-buttons:hover {
  opacity: 1;
}

/* Make sure the iframe container takes full height */
.modal-body {
  padding: 0;
}

.modal-body > div:first-child {
  padding: 1rem;
}
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .file-preview {
        height: 150px;
      }
      
      .pdf-icon,
      .text-icon {
        font-size: 3rem;
      }
      
      .empty-icon {
        font-size: 3.5rem;
      }
    }
  </style>
</head>
<body class="bg-light">
  <div class="container py-5">
    <!-- Upload Modal -->
    <div class="modal fade" id="uploadModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 class="modal-title"><i class="fas fa-cloud-upload-alt me-2"></i> Upload New File</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form id="uploadForm" enctype="multipart/form-data">
            <div class="modal-body">
              <div class="mb-3">
                <label for="titleInput" class="form-label">Title*</label>
                <input type="text" name="title" id="titleInput" class="form-control" required 
                       placeholder="Give your file a descriptive title" minlength="3" maxlength="100">
              </div>
              <div class="mb-3">
                <label for="descriptionInput" class="form-label">Description</label>
                <textarea name="description" id="descriptionInput" class="form-control" rows="3" 
                          placeholder="Optional description about this file" maxlength="500"></textarea>
              </div>
              <div class="mb-3">
                <label for="subjectInput" class="form-label">Subject/Category</label>
                <input type="text" name="subject" id="subjectInput" class="form-control" 
                       placeholder="e.g. Mathematics, Physics" maxlength="50">
              </div>
              <div class="mb-3">
                <label for="fileInput" class="form-label">File* (PDF/Image/Text)</label>
                <input type="file" name="file" id="fileInput" class="form-control" 
                       accept=".pdf,.jpg,.jpeg,.png,.txt" required>
                <div class="form-text">Max file size: 10MB. Supported formats: PDF, JPG, PNG, TXT</div>
                <div id="fileError" class="invalid-feedback d-none"></div>
              </div>
              <div class="progress mb-3 d-none" id="uploadProgress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" style="width: 0%"></div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-upload me-1"></i> Upload
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- View Modal -->
<!-- Update your view modal (around line 100) -->
<div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="viewModalTitle"></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-0" id="viewModalContent">
        <!-- Content will be loaded dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a href="#" class="btn btn-primary" id="downloadBtn" download>
          <i class="fas fa-download me-1"></i> Download
        </a>
      </div>
    </div>
  </div>
</div>

    <!-- Main Content -->
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="text-primary">
        <i class="fas fa-folder-open me-2"></i> My Uploads
      </h1>
      <button class="btn btn-primary upload-btn animate__animated animate__pulse" data-bs-toggle="modal" data-bs-target="#uploadModal">
        <i class="fas fa-plus me-2"></i> New Upload
      </button>
    </div>

    <!-- Filter Controls -->
    <div class="filter-controls animate__animated animate__fadeIn">
      <div class="row">
        <div class="col-md-6">
          <div class="input-group mb-3">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" placeholder="Search uploads..." id="searchInput">
          </div>
        </div>
        <div class="col-md-6">
          <div class="input-group mb-3">
            <span class="input-group-text"><i class="fas fa-filter"></i></span>
            <select class="form-select" id="subjectFilter">
              <option value="all">All Subjects</option>
              <% subjects.forEach(subject => { %>
                <option value="<%= subject %>" <%= currentFilter === subject ? 'selected' : '' %>><%= subject %></option>
              <% }); %>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Uploads Grid -->
    <div class="row g-4" id="uploadContainer">
      <% if (upload.length === 0) { %>
        <div class="col-12">
          <div class="empty-state animate__animated animate__fadeIn">
            <div class="empty-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <h4 class="text-muted">No Uploads Yet</h4>
            <p class="text-muted">Get started by uploading your first file</p>
            <button class="btn btn-primary upload-btn" data-bs-toggle="modal" data-bs-target="#uploadModal">
              <i class="fas fa-plus me-2"></i> Upload Now
            </button>
          </div>
        </div>
      <% } else { %>
        <% upload.forEach(item => { %>
          <div class="col-md-4 col-lg-3 animate__animated animate__fadeInUp" id="upload-<%= item._id %>">
            <div class="card upload-card h-100">
              <div class="file-preview">
                <% if(item.fileType === 'pdf') { %>
                  <i class="fas fa-file-pdf pdf-icon"></i>
                <% } else if(item.fileType === 'image') { %>
                  <img src="/upload/<%= item.filename %>" class="img-preview" alt="<%= item.title %>">
                <% } else { %>
                  <i class="fas fa-file-alt text-icon"></i>
                <% } %>
                <span class="file-badge"><%= item.fileType.toUpperCase() %></span>
              </div>
              <div class="card-body">
                <h5 class="card-title text-truncate"><%= item.title %></h5>
                <% if(item.description) { %>
                  <p class="card-text text-muted text-truncate"><%= item.description %></p>
                <% } %>
                <% if(item.subject) { %>
                  <span class="badge bg-primary mb-2"><%= item.subject %></span>
                <% } %>
                <div class="d-flex justify-content-between align-items-center">
                  <small class="upload-date">
                    <i class="far fa-calendar-alt me-1"></i>
                    <%= formatDate(item.createdAt) %>
                  </small>
                  <div class="action-buttons">
                    <button class="btn btn-sm btn-outline-primary view-btn" data-id="<%= item._id %>" aria-label="View">
                      <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-btn" data-id="<%= item._id %>" aria-label="Delete">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% }); %>
      <% } %>
    </div>

    <!-- Pagination -->
    <% if (upload.length > 0) { %>
      <nav class="mt-4" aria-label="Uploads pagination">
        <ul class="pagination justify-content-center">
          <% if (pagination.hasPreviousPage) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= pagination.previousPage %>&subject=<%= currentFilter %>" aria-label="Previous">
                <span aria-hidden="true"><i class="fas fa-chevron-left"></i></span>
              </a>
            </li>
          <% } else { %>
            <li class="page-item disabled">
              <span class="page-link" aria-hidden="true"><i class="fas fa-chevron-left"></i></span>
            </li>
          <% } %>
          
          <% for (let i = 1; i <= pagination.totalPages; i++) { %>
            <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>&subject=<%= currentFilter %>"><%= i %></a>
            </li>
          <% } %>
          
          <% if (pagination.hasNextPage) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= pagination.nextPage %>&subject=<%= currentFilter %>" aria-label="Next">
                <span aria-hidden="true"><i class="fas fa-chevron-right"></i></span>
              </a>
            </li>
          <% } else { %>
            <li class="page-item disabled">
              <span class="page-link" aria-hidden="true"><i class="fas fa-chevron-right"></i></span>
            </li>
          <% } %>
        </ul>
      </nav>
    <% } %>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global error handler
    const showErrorToast = (message) => {
      const toastContainer = document.querySelector('.toast-container') || document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      
      const toastId = 'toast-' + Date.now();
      const toastHTML = `
        <div id="${toastId}" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-header bg-danger text-white">
            <strong class="me-auto">Error</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHTML);
      if (!document.querySelector('.toast-container')) {
        document.body.appendChild(toastContainer);
      }
      
      // Auto-remove toast after 5 seconds
      setTimeout(() => {
        const toast = document.getElementById(toastId);
        if (toast) {
          toast.classList.remove('show');
          setTimeout(() => toast.remove(), 300);
        }
      }, 5000);
    };

    // Show success toast
    const showSuccessToast = (message) => {
      const toastContainer = document.querySelector('.toast-container') || document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      
      const toastId = 'toast-' + Date.now();
      const toastHTML = `
        <div id="${toastId}" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-header bg-success text-white">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHTML);
      if (!document.querySelector('.toast-container')) {
        document.body.appendChild(toastContainer);
      }
      
      // Auto-remove toast after 3 seconds
      setTimeout(() => {
        const toast = document.getElementById(toastId);
        if (toast) {
          toast.classList.remove('show');
          setTimeout(() => toast.remove(), 300);
        }
      }, 3000);
    };
  
    // Handle file upload with progress
    document.getElementById('uploadForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const form = this;
      const submitBtn = form.querySelector('button[type="submit"]');
      const progressBar = document.getElementById('uploadProgress');
      const fileInput = document.getElementById('fileInput');
      const fileError = document.getElementById('fileError');
      
      // Reset error state
      fileInput.classList.remove('is-invalid');
      fileError.classList.add('d-none');
      
      // Validate file size client-side first
      if (fileInput.files[0]?.size > 10 * 1024 * 1024) {
        fileInput.classList.add('is-invalid');
        fileError.textContent = 'File size exceeds 10MB limit';
        fileError.classList.remove('d-none');
        return;
      }
      
      // Validate file type
      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'text/plain'];
      if (!allowedTypes.includes(fileInput.files[0]?.type)) {
        fileInput.classList.add('is-invalid');
        fileError.textContent = 'Invalid file type. Only PDF, JPG, PNG, and TXT files are allowed.';
        fileError.classList.remove('d-none');
        return;
      }

      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Uploading...';
      progressBar.classList.remove('d-none');
      
      try {
        const formData = new FormData(form);
        const response = await fetch('/upload/upload', {
          method: 'POST',
          body: formData
        });
  
        const data = await response.json();
  
        if (!response.ok || !data.success) {
          throw new Error(data.error || 'Upload failed');
        }
  
        // Success handling
        const modal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
        if (modal) modal.hide();
        
        showSuccessToast('File uploaded successfully!');
        
        // Reload page after 2 seconds
        setTimeout(() => {
          window.location.reload();
        }, 2000);
  
      } catch (err) {
        console.error('Upload error:', err);
        showErrorToast(err.message || 'Upload failed. Please try again.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-upload me-1"></i> Upload';
        progressBar.classList.add('d-none');
      }
    });
  
    // Enhanced view button handler with file verification
    document.addEventListener('click', async function(e) {
      if (e.target.closest('.view-btn')) {
        const btn = e.target.closest('.view-btn');
        const uploadId = btn.getAttribute('data-id');
        const viewModal = new bootstrap.Modal(document.getElementById('viewModal'));
        const modalTitle = document.getElementById('viewModalTitle');
        const modalContent = document.getElementById('viewModalContent');
        const downloadBtn = document.getElementById('downloadBtn');
        
        // Show loading state
        modalContent.innerHTML = `
          <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading file details...</p>
          </div>
        `;
        
        try {
          // Fetch upload metadata
          const response = await fetch(`/upload/${uploadId}`);
          if (!response.ok) throw new Error(`Server error: ${response.status}`);
          
          const data = await response.json();
          if (data.error) throw new Error(data.error);
          
          modalTitle.textContent = data.title;
          const fileUrl = data.fileUrl || `/upload/${data.filename}`;
          downloadBtn.href = fileUrl;
          downloadBtn.style.display = 'inline-block';
          
          // Verify file exists for images/PDFs
        // Replace the PDF preview section with this:
if (data.fileType === 'pdf') {
  modalContent.innerHTML = `
    <div style="height: 70vh; position: relative;">
      <iframe src="${fileUrl}" 
              style="width: 100%; height: 100%; border: none;" 
              onerror="this.onerror=null;this.parentElement.innerHTML='<div class=\'alert alert-danger\'>Failed to load PDF. Please download the file to view it.</div>'">
      </iframe>
      <div class="pdf-overlay-buttons">
        <a href="${fileUrl}" class="btn btn-primary" download>
          <i class="fas fa-download me-1"></i> Download
        </a>
      </div>
    </div>
    ${data.description ? `<div class="mt-3"><strong>Description:</strong> ${data.description}</div>` : ''}
  `;
}
          
          // Render content based on file type
          if (data.fileType === 'pdf') {
  modalContent.innerHTML = `
    <div style="height: 70vh; position: relative;">
      <iframe src="${fileUrl}" 
              style="width: 100%; height: 100%; border: none;" 
              onerror="this.onerror=null;this.parentElement.innerHTML='<div class=\'alert alert-danger\'>Failed to load PDF. Please download the file to view it.</div>'">
      </iframe>
      <div class="pdf-overlay-buttons">
        <a href="${fileUrl}" class="btn btn-primary" download>
          <i class="fas fa-download me-1"></i> Download
        </a>
      </div>
    </div>
    ${data.description ? `<div class="mt-3"><strong>Description:</strong> ${data.description}</div>` : ''}
  `;
}else if (data.fileType === 'image') {
            modalContent.innerHTML = `
              <div class="text-center">
                <img src="${fileUrl}" class="img-fluid" alt="${data.title}"
                     onerror="this.onerror=null;this.parentElement.innerHTML='<div class=\'alert alert-danger\'>Failed to load image</div>'">
                ${data.description ? `<p class="mt-3">${data.description}</p>` : ''}
              </div>
            `;
          } else {
            // For text files, fetch the content
            let textContent = 'No text content available';
            try {
              const textResponse = await fetch(fileUrl);
              if (textResponse.ok) {
                textContent = await textResponse.text();
              }
            } catch (err) {
              console.error('Failed to fetch text content:', err);
            }
            
            modalContent.innerHTML = `
              <div class="mb-3">
                <h6>Description:</h6>
                <p>${data.description || 'No description provided'}</p>
              </div>
              <div>
                <h6>Content:</h6>
                <div class="text-content-full bg-light p-3 rounded">
                  <pre class="m-0">${textContent}</pre>
                </div>
              </div>
            `;
          }
          
          viewModal.show();
        } catch (err) {
          console.error('View error:', err);
          modalContent.innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-triangle me-2"></i>
              ${err.message || 'Failed to load file'}
            </div>
          `;
          downloadBtn.style.display = 'none';
          viewModal.show();
        }
      }
    });
  
    // Enhanced delete handler
    document.addEventListener('click', async function(e) {
      if (e.target.closest('.delete-btn')) {
        const btn = e.target.closest('.delete-btn');
        const uploadId = btn.getAttribute('data-id');
        const uploadCard = document.getElementById(`upload-${uploadId}`);
        
        if (!confirm('Are you sure you want to delete this upload? This action cannot be undone.')) {
          return;
        }
        
        // Add deleting animation
        uploadCard.classList.add('animate__animated', 'animate__fadeOut');
        
        try {
          const response = await fetch(`/upload/${uploadId}`, { 
            method: 'DELETE' 
          });
          
          if (!response.ok) throw new Error(`Server error: ${response.status}`);
          
          const data = await response.json();
          if (!data.success) throw new Error(data.error || 'Delete failed');
          
          // Wait for animation to complete
          setTimeout(() => {
            uploadCard.remove();
            showSuccessToast('Upload deleted successfully!');
            
            // If this was the last item, show empty state
            if (document.querySelectorAll('.upload-card').length === 0) {
              window.location.reload();
            }
          }, 500);
        } catch (err) {
          console.error('Delete error:', err);
          uploadCard.classList.remove('animate__animated', 'animate__fadeOut');
          showErrorToast(`Delete failed: ${err.message}`);
        }
      }
    });
  
    // Filter functionality
    document.getElementById('subjectFilter').addEventListener('change', function() {
      const subject = this.value;
      window.location.href = `?subject=${subject}`;
    });
  
    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase().trim();
      document.querySelectorAll('.upload-card').forEach(card => {
        const title = card.querySelector('.card-title').textContent.toLowerCase();
        const description = card.querySelector('.card-text')?.textContent.toLowerCase() || '';
        const subject = card.querySelector('.badge')?.textContent.toLowerCase() || '';
        
        const cardElement = card.closest('.col-md-4, .col-lg-3');
        if (cardElement) {
          if (title.includes(searchTerm) || 
              description.includes(searchTerm) || 
              subject.includes(searchTerm)) {
            cardElement.style.display = 'block';
          } else {
            cardElement.style.display = 'none';
          }
        }
      });
    });

    // Reset form when modal is hidden
    document.getElementById('uploadModal').addEventListener('hidden.bs.modal', function() {
      document.getElementById('uploadForm').reset();
      document.getElementById('fileInput').classList.remove('is-invalid');
      document.getElementById('fileError').classList.add('d-none');
    });
  </script>
</body>
</html>